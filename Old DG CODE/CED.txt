IDENTIFICATION DIVISION.
PROGRAM-ID. CED.
*********************************************************************
*CALLABLE EDITOR
*
* JAY ANDERSON 09-87
*********************************************************************
AUTHOR. ANDERSON.
DATE-WRITTEN.   09/01/87.
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
     SOURCE-COMPUTER. MV-8000.
     OBJECT-COMPUTER. MV-8000.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
****
* COPY "FILENAME.SL".
****
SELECT OUTPRINT ASSIGN TO OUTPRINTFILE
      RESERVE 1 AREA ORGANIZATION SEQUENTIAL
      ACCESS SEQUENTIAL
      FILE STATUS IS FILE-STATUS.
DATA DIVISION.
FILE SECTION.
****
* COPY "FILENAME.FD".
****
FD OUTPRINT
        BLOCK CONTAINS 8192 CHARACTERS
        RECORDING MODE IS DATA-SENSITIVE.
01 PLINE.
      05 FILLER PIC X(80).
WORKING-STORAGE SECTION.
*****                                           
*SCREEN CONSTANTS
77  ACNT		PIC 9(4) COMP.
77  CCNT		PIC 9(4) COMP.
77  MAXLINELEN         PIC S99 COMP VALUE 75.
77  NUMBERWIDTH        PIC S9(4) COMP VALUE 5.
77  BLANKLINEWINDOW    PIC S9(4) COMP VALUE 6.
77  KEEPONSCREEN       PIC S9(4) COMP VALUE 12.
*END SCREEN CONSTANTS
*****
*****
* STATE VARIABLES
77  CBSET-SW     PIC X.
     88  CBSET   VALUE '1'.
77  CFSET-SW   PIC X.
      88  CFSET  VALUE '1'.
77  DBSET-SW   PIC X.
      88  DBSET  VALUE '1'.
77  LASTLINE-SW   PIC X.
      88  LASTLINE  VALUE '1'.
77  READJUSTWINDOW-SW  PIC X.
      88  READJUSTWINDOW VALUE '1'.
77  FOUNDCHAR-SW  PIC X.
      88  FOUNDCHAR  VALUE '1'.
77  NOT-A-MATCH-SW PIC X.
      88  NOT-A-MATCH VALUE '1'.
77  BIGFOUND-SW  PIC X.
      88  BIGFOUND VALUE '1'.
77  EOF-SW  PIC X.
      88  EOF  VALUE '1'.
77  GOT-ONE

      88  GOT-ONE  VALUE '1'.
77  EOF1-SW  PIC X.
      88  EOF1 VALUE '1'.
77  SECOND-EOF1-SW PIC X.
      88  SECOND-EOF1 VALUE '1'.
* END STATE VARIABLES
*****
77  DELSAVTOS		PIC 9(4) COMP.
77  DELSAVLIN          PIC 9(4) COMP.
77  CBFIRST            PIC 9(4) COMP.
77  CFFIRST            PIC 9(4) COMP.
77  DBFIRST            PIC 9(4) COMP.
77  EDITFILE           PIC X(128).

77  EDITFILEBAC        PIC X(128).
77  STRNDX             PIC 9(9) COMP.
77  TABNDX             PIC 9(9) COMP.
77  C-CON-SW           PIC X.
77  CURPOS             PIC S9(9) COMP.
77  DI-RECT            PIC XX.
77  LINELN             PIC 9(4) COMP.
77  TXNDX              PIC 9(4) COMP.
77  TNDX               PIC 9(4) COMP.
77  LASTLINEPOS        PIC S9(4) COMP.
77  ACTIVEREC          PIC S9(4) COMP.
77  STRTWRK            PIC S9(4) COMP.
77  STRTPOS            PIC 9(4) COMP.
77  ENDPOS             PIC 9(4) COMP.
77  SAVEINUSE          PIC 9(4) COMP.
77  LOWVALUESTR        PIC X(80) VALUE LOW-VALUES.
77  TEMPSTR            PIC X(4).
77  DELIM              PIC X(4).
77  LINEVAR            PIC S99 COMP VALUE 1.
77  COLVAR             PIC S99 COMP VALUE 0.
77  BLANKLINECNT       PIC S9(9) COMP.
77  M                  PIC S9(9) COMP.
77  L                  PIC S9(9) COMP.
77  J                  PIC S9(9) COMP.
77  IX                 PIC S9(9) COMP.
77  I                  PIC S9(9) COMP.
77  CMPLEN             PIC S9(9) COMP.
77  MATCH-CNT          PIC S9(9) COMP.
77  HIGHLEVEL          PIC 9(4).
77  NEWLEVEL           PIC 9(4).
77  OUTPRINTFILE       PIC X(128).
*****
* USE WITH CRE?D CWR?D SUBROUTINE
77  FNKEY              PIC S9(9) COMP.
77  CDIST-OPT          PIC S9(9) COMP.
77  RELCUR             PIC 9(9) COMP.
* END USE WITH CRE?D CWR?D SUBROUTINE
*****
01  GTLENMAX		PIC 9(9) COMP VALUE 80.
01  GTREALLEN		PIC 9(9) COMP.
01  ONELINE		PIC X(80) VALUE
	'0123456789'.
01  FILEPROBLEM.
	05  FILLER	PIC 9(4) COMP VALUE 80.
	05  FILEP 	PIC X(80) VALUE '**** File problem ****'.
01  FILEENTRY.
      05  ENTRYLEN     PIC 9(4) COMP VALUE 80.
      05  FILEBUFF     PIC X(80).
01  TABSTOPS.
      05  TABLEN       PIC 9(4) COMP VALUE 80.
      05  TABTOP.
          10  FILLER   PIC X(20) VALUE '     X     X     X  '.
          10  FILLER   PIC X(20) VALUE '   X     X     X    '.
          10  FILLER   PIC X(20) VALUE ' X     X     X     X'.
          10  FILLER   PIC X(20) VALUE '  X     X     X     '.
      05  TABSTOP REDEFINES TABTOP PIC x OCCURS 80.
      05  DEFAULTTABS.
          10  FILLER   PIC X(20) VALUE '     X     X     X  '.
          10  FILLER   PIC X(20) VALUE '   X     X     X    '.
          10  FILLER   PIC X(20) VALUE ' X     X     X     X'.
          10  FILLER   PIC X(20) VALUE '  X     X     X     '.
01  WSTR1.
      05  WSTR1-BYTE OCCURS 80 PIC X.
01  WORK-BUFF.
        03 SCRCHARX   OCCURS 256.
             05  SCRCHAR PIC 99 COMP.
01  PATHASH            PIC S9(9) COMP.
01  SRCHASH            PIC S9(9) COMP.
01  CHAR-POINTER       PIC S9(9) COMP.
*****
* USE FOR CONVERTING ASCII TO A NUMBER
01  TOKEN.
         05 TOKENX         PIC X(32).
         05 TOKENY REDEFINES TOKENX OCCURS 32 PIC X.
01  DIGITWS.
      05 ADIGITX PIC X.
             88  ADIGIT VALUE "0" THRU "9".
      05 ADIGIT9 REDEFINES ADIGITX PIC S99 COMP.
01  ASCIIZERO          PIC S99 COMP VALUE 48.
01  N                  PIC S9(9) COMP.
01  A                  PIC S9(9) COMP.
01  NUM                PIC 9(10).
* END USE FOR CONVERTING ASCII TO A NUMBER
*****
01  CLEAR-SCREEN.
      05  CL-LINE      PIC 99  COMP VALUE 1.
      05  CL-COL       PIC 99  COMP VALUE 1.
      05  TOF.
             10  FILLER PIC 9(4) COMP VALUE 1.
             10  FILLER PIC 99 COMP VALUE 12.
01  HOLDVAR            PIC 99 COMP.
01  LINE-BUFFER.
      05  LI-LINE      PIC 99  COMP VALUE 1.
      05  LI-COL       PIC 99  COMP VALUE 1.
01  LILI.
      10  LI-LEN       PIC 9(4) COMP VALUE 4.
      10  LI-ATTR      PIC 99 COMP VALUE 11.
      10  LI-BUFF      PIC 9999.
01  LILII.
      10  LII-LEN      PIC 9(4) COMP VALUE 4.
      10  LII-BUFF     PIC 9999.
      10  LII-BUFFX REDEFINES LII-BUFF PIC X(4).
      10  LIIX REDEFINES LII-BUFF OCCURS 4 PIC 99 COMP.
01 HOLDX 	       PIC 999 COMP.
01 BACKTOCAP		PIC 99 COMP VALUE 32.
01  TEXT-BUFFER.
      05  TXTX.
            10  TX-LEN PIC 9(4) COMP VALUE 3.
            10  TX-BUFF.
              15 TX-BYTE OCCURS 80 PIC X.
01  WRAPBUFF.
	05  WRAPBYTE OCCURS 80 PIC X.
01  SAVEJ			PIC 9(4) COMP.
01  WRAPON-SW			PIC X.
	88  WRAPON		VALUE "1".

01  FUNCTIONKEYS.
      05  CARR         PIC S9(9) COMP VALUE -1.
      05  TABBER       PIC S9(9) COMP VALUE -2.
      05  ENTERED      PIC 9(9) COMP VALUE ZERO.
      05  UPARROW      PIC 9(9) COMP VALUE 36.
      05  DOWNARROW    PIC 9(9) COMP VALUE 35.
      05  EXCAPE       PIC 9(9) COMP VALUE 1.
      05  F1           PIC 9(9) COMP VALUE 2.
      05  F2           PIC 9(9) COMP VALUE 3.
      05  F3           PIC 9(9) COMP VALUE 4.
      05  F4           PIC 9(9) COMP VALUE 5.
      05  F5           PIC 9(9) COMP VALUE 6.
      05  F6           PIC 9(9) COMP VALUE 7.
      05  F7           PIC 9(9) COMP VALUE 8.
      05  F8           PIC 9(9) COMP VALUE 9.
01  WS-DATE.
      05  WS-YY        PIC 99.
      05  WS-MM        PIC 99.
      05  WS-DD        PIC 99.
01 WS-TIME.
      05  WS-HR        PIC 99.
      05  WS-MIN       PIC 99.
      05  WS-SEC       PIC 99.
      05  FILLER       PIC 99.
01  POINT              PIC 9(4) COMP.
01  HOLDABUFF          PIC X(80).
01  TEMP               PIC 9(4) COMP.
01  FREELINES OCCURS 1500.
      05  ALINEDELPOINT  PIC S9(4) COMP.
      05  ALINE          PIC X(80).
01  FREELINEOVERHEAD OCCURS 1500.
      05  ALINEPOINT     PIC 9(4) COMP.
      05  ALINELEN       PIC 9(4) COMP.
01  HOUSERECORD.
      05 DELRECCHAIN     PIC S9(4) COMP.
      05 LASTUSED        PIC S9(4) COMP.
      05 INUSE           PIC S9(4) COMP.
01  CURR-TOS             PIC S9(4) COMP.
01  TABLELIMIT           PIC S9(9) COMP VALUE 1500.
01  SEARCH-BUFF.
      05  SRSR.
             10  SRCHLEN PIC 9(4) COMP VALUE 60.
             10  PATTERNN.
                    15 PATCHAR OCCURS 60    PIC 99 COMP.
01  BLINK-BUFF.
      05  BLSR.
       10  BLINKLEN      PIC 9(4) COMP VALUE 6.
       10  FILLER        PIC 99 COMP VALUE 14.
       10  FILLER        PIC X(4)  VALUE 'Wait'.
       10  FILLER        PIC 99 COMP VALUE 15.
01  BEEPER.
      10  FILLER         PIC 9(4) COMP VALUE 1.
      10  FILLER         PIC 99 COMP VALUE 7.
01  BMARK.
      10  FILLER         PIC 9(4) COMP VALUE 1.
      10  FILLER         PIC X VALUE ">".
01  ERASEEOL.
      10  FILLER         PIC 9(4) COMP VALUE 1.
      10  FILLER         PIC 99 COMP VALUE 11.
01  ENTERSEARCH.
      10  FILLER       PIC 9(4) COMP VALUE 16.
      10  FILLER       PIC 99 COMP VALUE 11.
      10  FILLER       PIC X(15) VALUE
             'Enter Search: '.
01  FILENOTFOUND.
      10  FILLER       PIC 9(4) COMP VALUE 16.
      10  FILLER       PIC 99 COMP VALUE 11.
      10  FILLER       PIC X(15) VALUE
             'File not found'.
01  YESORNOBUFF.
      10  FILLER       PIC 9(4) COMP VALUE 16.
      10  FILLER       PIC 99 COMP VALUE 11.
      10  FILLER       PIC X(15) VALUE
             'Save file?  : '.

01  CONFIRMBUFF.
      10  FILLER       PIC 9(4) COMP VALUE 27.
      10  FILLER       PIC 99 COMP VALUE 11.
      10  CACTION      PIC X(8) VALUE 'Delete'.
      10  STRTPOSX     PIC ZZZZ.
      10  FILLER       PIC X VALUE ' '.
      10  ENDPOSX      PIC ZZZZ.
      10  FILLER       PIC X VALUE ' '.
      10  FILLER       PIC X(09) VALUE
             'Confirm? '.
01  QUESTIONSCR.
      10  YESORNO-LEN  PIC 9(4) COMP VALUE 1.
      10  YESORNO-SW   PIC X.
01  ENTERFILE.
      10  FILLER       PIC 9(4) COMP VALUE 16.
      10  FILLER       PIC 99 COMP VALUE 11.
      10  FILLER       PIC X(15) VALUE
             'Enter File  : '.
01  LOADI		PIC S9(9) COMP.
01  RECLN1             PIC S9(9) COMP.
01  READFLAG1          PIC S9(9) COMP.
01  READOFFSET1        PIC S9(9) COMP.
01  SAVEBYTES1         PIC S9(9) COMP.
01  BYTESREAD1         PIC S9(9) COMP.
01  GETME-WS.
      05  GMES  PIC S9(4) COMP VALUE ZERO.
      05  GCMD  PIC S9(4) COMP VALUE 1.		
      05  GCNT  PIC S9(4) COMP VALUE 2.
      05  GARG  PIC S9(4) COMP VALUE 3.
      05  GTSW  PIC S9(4) COMP VALUE 4.
      05  GSWS  PIC S9(4) COMP VALUE 5.
01  NO-ARG             PIC 9(9) COMP VALUE 228.
01  G-ARGUMENT-NO      PIC S9(4) COMP VALUE ZERO.
01  G-SWITCH           PIC X(32) VALUE SPACES.
01  G-BUFFER           PIC X(200) VALUE SPACES.
01  G-ERRWRD           PIC S9(9) COMP VALUE ZERO.
01  G-AC0              PIC S9(9) COMP VALUE ZERO.
01  G-AC1              PIC S9(9) COMP VALUE ZERO.
01  INFILE1            PIC X(200).
01  ERRWRD             PIC S9(9) COMP.
      88  END-OF-FILE VALUE 24.
      88  PERMON VALUE 212.
01  CLINEFEEDS1        PIC S9(9) COMP.
01  CFORMFEEDS1        PIC S9(9) COMP.
01  CLINEFEEDS         PIC S9(9) COMP.
01  FILLER.
      05  FORMF        PIC S99 COMP VALUE 12.
      05  FORMFEEDER REDEFINES FORMF PIC X.
01  FILLER.
      05  ATABR        PIC S99 COMP VALUE 9.
      05  ATAB       REDEFINES ATABR PIC X.
01  ERRMSG.
      05  FILLER       PIC X(5).
             88  NO-ERROR VALUE '     '.
      05  FILLER       PIC X(75).
01  WORKBUFF1.
    03  WB1.
      05  WORKBUFF11   PIC X.
      05  FILLER       PIC X(255).
    03  WB2 REDEFINES WB1.
      05  WBYTE OCCURS 256 PIC X.
01  WORKBUFF2.
    03  WBX1.
      05  WORKBUFF21  PIC X.
      05  FILLER PIC X(255).
    03  WBX2 REDEFINES WBX1.
      05  WBYTE2 OCCURS 256 PIC X.
COPY 'FILESTATUS32.WS'.
COPY "WHO32.WS".

LINKAGE SECTION.
01  MYPARM.
	05  LOWLINE            PIC S9(9) COMP.
	05  HIGHLINE           PIC 9(9) COMP.
	05  ANCHORCOL          PIC S9(9) COMP.
	05  CALLFILE	       PIC X(128).
	05  NUMOFLINES	       PIC 9(9) COMP.
	05  MAXLINESALLOW      PIC 9(9) COMP.
	05  INFOSWITCHS.
		10  DISPLAYONLY-SW     PIC X.
			88  DISPLAYONLY VALUE '1'.
		10  READONLY-SW	       PIC X.
			88  READONLY   VALUE '1'.
		10  NOSAVE-SW		PIC X.
			88  NOSAVE	VALUE '1'.
	05  INLINES OCCURS  5000 PIC X(80).

PROCEDURE DIVISION USING MYPARM.
DECLARATIVES.
0000-OUTPRINT SECTION.
      USE AFTER ERROR PROCEDURE ON OUTPRINT.
OUTPRINT-ERROR.
END DECLARATIVES.
DUMMY SECTION.
*********************************************************************
*BEGIN OF  CONTROL PARAGRAPH
0010-CONTROL.
      MOVE MAXLINESALLOW TO TABLELIMIT.
      IF TABLELIMIT < 1  OR TABLELIMIT > 5000
		MOVE 5000 TO TABLELIMIT.
      CALL "W?O" USING WHO-PID WHO-CON WHO-USER.
            UNSTRING WHO-USER DELIMITED BY "." OR " "
             INTO WHO-USER-PRE WHO-USER-ID.
      IF WHO-USER3 = SPACES THEN
            MOVE WHO-USER-PRE TO WHO-USER3.
      IF RUNNING-BATCH
             MOVE ' ' TO C-CON-SW.
      INSPECT WHO-USER3 REPLACING ALL ' ' BY 'Z'.

      MOVE DEFAULTTABS TO TABTOP.
*****
* DEFINE SCREEN DIMENSIONS AND INPUT WINDOW
      COMPUTE MAXLINELEN = 80 - NUMBERWIDTH - ANCHORCOL - 1.
      COMPUTE TEMP = HIGHLINE - LOWLINE + 1.
      DIVIDE 2 INTO TEMP GIVING KEEPONSCREEN.
      DIVIDE 2 INTO KEEPONSCREEN GIVING BLANKLINEWINDOW.
* END DEFINE SCREEN DIMENSIONS AND INPUT WINDOW
*****

*****
* SEE IF CALLED WITH A FILENAME
      IF CALLFILE = SPACES THEN
	MOVE '@NULL' TO CALLFILE.
      MOVE SPACES TO INFILE1.
      STRING CALLFILE DELIMITED BY SPACE  INTO INFILE1.
      MOVE INFILE1 TO EDITFILE.
      IF CALLFILE = '@NULL'
	IF NUMOFLINES = ZERO
	  PERFORM LOAD-FROM-FILE THRU LOAD-FROM-FILE-EXIT
	ELSE
	  PERFORM LOAD-FROM-MEM THRU LOAD-FROM-MEM-EXIT
      ELSE
        PERFORM LOAD-FROM-FILE THRU LOAD-FROM-FILE-EXIT.
* END  SEE IF CALLED WITH A FILENAME
*****

*****
*     THIS NEXT SENTENCE CHEATS JUST A LITTLE (EXIT PARAGRAPH)
      IF DISPLAYONLY THEN EXIT PROGRAM.
*
*****

*****
*MAIN LOOP
      MOVE ZERO TO FNKEY.
      PERFORM MAINEDITPROCEDURE UNTIL FNKEY = F8 OR EXCAPE.
      PERFORM DELOADMEM VARYING I FROM 1 BY 1 UNTIL I > INUSE.
      MOVE INUSE TO NUMOFLINES.
*END MAIN LOOP
*****
*****
* READONLY STOP RIGHT HERE
       IF READONLY THEN EXIT PROGRAM.
*
*****

*****
* DELETE TEMPS
      STRING '?.'    DELIMITED BY SIZE
       WHO-PID DELIMITED BY SIZE
       '.000.TMP' DELIMITED BY SIZE INTO OUTPRINTFILE.
      CALL 'CDEL' USING OUTPRINTFILE ERRWRD.
* END DELETE TEMPS
*****

*****
* THE VERY END
      EXIT PROGRAM.
* END THE VERY END
*****

*END OF CONTROL PARAGRAPH
*********************************************************************

CHECKATNULL.
           MOVE LOW-VALUES TO INFILE1 FILEBUFF.
           PERFORM SET-A-FILENAME.
           IF FNKEY = EXCAPE THEN
                 NEXT SENTENCE
           ELSE MOVE SPACE TO EDITFILE
                MOVE   FILEBUFF TO EDITFILE.
**************
* ASK SAVE FILE?
* GET Y OR N
ASKSAVEORNO.
      COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH.
      MOVE ZERO TO RELCUR.
      CALL 'CWR?D' USING LI-LINE LI-COL YESORNOBUFF.
      COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH + 16.
      MOVE 1 TO YESORNO-LEN.
      CALL 'CRE?D' USING LI-LINE LI-COL QUESTIONSCR FNKEY RELCUR
             CDIST-OPT.

* END ASK SAVE FILE?
*****

*****
* THE MAIN EDIT PROCEDURE ACCEPTS AND DECIPHERS ALL COMMANDS AS
* WELL AS KEEPING THE SCREEN UPDATED.  IT ALL HAPPENS FROM HERE.
MAINEDITPROCEDURE.
       IF LASTLINE THEN
              MOVE ' ' TO LASTLINE-SW
              IF LI-LINE > LASTLINEPOS
                 MOVE LASTLINEPOS TO LI-LINE.
      COMPUTE J = (LI-LINE + CURR-TOS - LOWLINE).
      MOVE J TO LII-BUFF.
      COMPUTE TEMP = NUMBERWIDTH - 1.
      MOVE TEMP TO LI-LEN LII-LEN.
      MOVE ANCHORCOL TO LI-COL.
      MOVE ZERO TO RELCUR.
      CALL 'CRE?D' USING LI-LINE LI-COL LILII FNKEY RELCUR CDIST-OPT.
      IF INUSE = ZERO THEN
         IF FNKEY = F8 OR EXCAPE
             NEXT SENTENCE
         ELSE
             MOVE ZERO TO FNKEY
             UNSTRING LII-BUFFX DELIMITED BY
             	'LO' OR 'lo'
             	INTO TEMPSTR DELIMITER DELIM
	     IF NOT READONLY
	       IF DELIM = 'LO' OR 'lo'
		NEXT SENTENCE
	       ELSE
             	MOVE 'IN  ' TO LII-BUFFX.
      IF FNKEY = F2 THEN
        IF CURR-TOS > ((HIGHLINE - LOWLINE) + 1)
       		COMPUTE NUM = CURR-TOS - ((HIGHLINE - LOWLINE) + 1)
	ELSE MOVE 1 TO NUM
	END-IF
       PERFORM GOTOLINE
      ELSE
      IF FNKEY = F3 THEN
       COMPUTE NUM = CURR-TOS + ((HIGHLINE - LOWLINE) + 1)
       PERFORM GOTOLINE
      ELSE
      IF FNKEY = F6 THEN
       MOVE 'SB' TO DI-RECT
       MOVE J TO CURPOS
       IF J > 1 THEN
        SUBTRACT 1 FROM CURPOS
       END-IF
       MOVE ' ' TO EOF-SW
       MOVE ' ' TO BIGFOUND-SW
       COMPUTE LI-COL = ANCHORCOL 
       MOVE LI-LINE TO HOLDVAR
       CALL 'CWR?D' USING LI-LINE LI-COL BLINK-BUFF
       PERFORM 1120-SEARCH UNTIL BIGFOUND OR EOF
       MOVE HOLDVAR TO LINEVAR
       PERFORM LINE-AT-A-TIME
      ELSE
      IF FNKEY = F7 THEN
       MOVE 'SF' TO DI-RECT
       MOVE J TO CURPOS
       IF J < INUSE THEN
        ADD 1 TO CURPOS
       END-IF
       MOVE ' ' TO EOF-SW
       MOVE ' ' TO BIGFOUND-SW
       COMPUTE LI-COL = ANCHORCOL
       MOVE LI-LINE TO HOLDVAR
       CALL 'CWR?D' USING LI-LINE LI-COL BLINK-BUFF
       PERFORM 1120-SEARCH UNTIL BIGFOUND OR EOF
       MOVE HOLDVAR TO LINEVAR
       PERFORM LINE-AT-A-TIME
      ELSE
      IF FNKEY = UPARROW THEN
         IF LI-LINE = LOWLINE THEN
            IF CURR-TOS = 1 THEN
                  CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
            ELSE
                 IF CURR-TOS > KEEPONSCREEN THEN
                  SUBTRACT KEEPONSCREEN FROM CURR-TOS
                  PERFORM PAINT-SCREEN
                  ADD KEEPONSCREEN    TO LI-LINE
                  SUBTRACT 1 FROM LI-LINE
                 ELSE
                  MOVE 1 TO CURR-TOS
                  PERFORM PAINT-SCREEN
         ELSE SUBTRACT 1 FROM LI-LINE
      ELSE
      IF FNKEY = DOWNARROW THEN
         IF LI-LINE = HIGHLINE THEN
            IF CURR-TOS =  INUSE
              CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
            ELSE
            IF CURR-TOS < (INUSE - KEEPONSCREEN) THEN
                   ADD KEEPONSCREEN TO CURR-TOS
                   PERFORM PAINT-SCREEN
                   SUBTRACT KEEPONSCREEN    FROM LI-LINE
                   ADD  1 TO   LI-LINE
            ELSE
                   MOVE INUSE TO CURR-TOS
                   PERFORM PAINT-SCREEN
            ELSE
                IF J = INUSE THEN
                   CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
            ELSE
                   ADD 1 TO LI-LINE
      ELSE
**********************************************************************
*  LO -- LOAD                     SF  -- SEARCH FORWARD
*  RP -- REPAINT                  SB  -- SEARCH BACKWARD
*  IN  -- INSERT LIKE SED 	  SA  -- SAVE FILE
*  DE -- DELETE                   MO  -- MODIFIY
*  AF -- AFTER                    ST  -- SET TABS
*  FA -- FILE 

*  BE -- BEFORE                   AP  -- APPEND
*  DB -- DELETE BLOCK             CF  -- COPY TO FILE
*  CB -- COPY BLOCK
*********************************************************************
*  FUNCTION KEYS
*    F1 ----
*    F2 ---- PAGE UP
*    F3 ---- PAGE DOWN
*    F4 ----
*    F5 ----
*    F6 ---- CONTINUE SEARCH BACKWARD
*    F7 ---- CONTINUE SEARCH FORWARD
*    F8 ---- EXIT PROGRAM
*********************************************************************
	   PERFORM CHECKCAP VARYING I FROM 1 BY 1 UNTIL I > 4
           UNSTRING LII-BUFFX DELIMITED BY
             	'RP' OR 'SF' OR 'SB'
              	OR 'IN' OR 'DE'  OR 'MO'
              	OR 'AF' OR 'BE'  OR
		'ST' OR 'FA'
 		OR 'FB'  OR 'AP'  OR 'LO'
 		OR 'CF'  OR 'DB' OR 'CB' OR 'SA'
             INTO TEMPSTR DELIMITER DELIM
           MOVE DELIM TO DI-RECT
           IF DELIM = 'AP'  THEN
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
              MOVE INUSE TO NUM
              PERFORM GOTOLINE
              COMPUTE LI-LINE = LASTLINEPOS + 1
              MOVE 'IN  ' TO DELIM
              PERFORM DO-INSERT UNTIL FNKEY = EXCAPE
	      MOVE ZERO TO FNKEY
              MOVE LOW-VALUES TO HOLDABUFF
           ELSE
           IF DELIM = 'ST'
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
             PERFORM SET-A-TABTAB
           ELSE
           IF DELIM = 'CF'
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
              PERFORM COPY-TO-FILE
           ELSE
           IF DELIM = 'SA'
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
              PERFORM SAVE-THIS-FILE
           ELSE
           IF DELIM = 'CB'
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
             PERFORM COPY-A-BLOCK
           ELSE
           IF DELIM = 'DB'
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
             PERFORM DELETE-A-BLOCK
           ELSE
           IF DELIM = 'SF' OR 'SB'
             PERFORM SET-A-SEARCH
	     MOVE ZERO TO FNKEY
           ELSE
           IF DELIM =  'IN'
	      IF READONLY THEN
	         NEXT SENTENCE
	      ELSE
	     MOVE ' ' TO WRAPON-SW
             PERFORM DO-INSERT UNTIL FNKEY = EXCAPE
	     MOVE ZERO TO FNKEY
             MOVE LOW-VALUES TO HOLDABUFF
           ELSE
           IF DELIM = 'DE'
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
             PERFORM DO-DELETE
           ELSE
           IF DELIM = 'RP'
             PERFORM PAINT-SCREEN
           ELSE
           IF DELIM = 'AF' OR 'BE'
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
             IF DELIM = 'AF'
              COMPUTE M = J + 1
             ELSE COMPUTE M = J
             END-IF
             MOVE SPACE TO INFILE1
             STRING '?.'    DELIMITED BY SIZE
              WHO-PID DELIMITED BY SIZE
              '.000.TMP' DELIMITED BY SIZE INTO INFILE1
             PERFORM INSERT-FROM-FILE
           ELSE
           IF DELIM = 'FA' OR 'FB'
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
             IF DELIM = 'FA'
              COMPUTE M = J + 1
             ELSE COMPUTE M = J
             END-IF
             MOVE SPACE TO INFILE1
             PERFORM SET-A-FILENAME
             IF FNKEY = EXCAPE THEN
              MOVE ZERO TO FNKEY
             ELSE
             UNSTRING FILEBUFF DELIMITED BY LOW-VALUE OR SPACE
                    INTO INFILE1
             PERFORM INSERT-FROM-FILE
           ELSE
           IF DELIM = 'LO'
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
             MOVE SPACE TO INFILE1
             PERFORM SET-A-FILENAME
             IF FNKEY = EXCAPE THEN
              MOVE ZERO TO FNKEY
             ELSE
             STRING FILEBUFF DELIMITED BY SIZE
              INTO INFILE1
             PERFORM LOAD-FROM-FILE THRU LOAD-FROM-FILE-EXIT
           ELSE
           IF DELIM = 'MO'
	      IF READONLY THEN
		NEXT SENTENCE
	      ELSE
             MOVE ZERO TO RELCUR
             PERFORM LOOPER2 UNTIL FNKEY = EXCAPE
	     MOVE ZERO TO FNKEY
           ELSE
                 MOVE LII-BUFF TO TOKEN
                 PERFORM 1040-NUMBER
                 IF NUM > 0 THEN
		  IF J NOT = NUM THEN
			PERFORM GOTOLINE
		  ELSE
         		IF LI-LINE = HIGHLINE THEN
            		  IF CURR-TOS =  INUSE
              			CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
            		  ELSE
            		  IF CURR-TOS < (INUSE - KEEPONSCREEN) THEN
                   		ADD KEEPONSCREEN TO CURR-TOS
                   		PERFORM PAINT-SCREEN
                   		SUBTRACT KEEPONSCREEN    FROM LI-LINE
                   		ADD  1 TO   LI-LINE
            		  ELSE
                   		MOVE INUSE TO CURR-TOS
                   		PERFORM PAINT-SCREEN
            		ELSE
            		IF J = INUSE THEN
                   		CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
            		ELSE
                   		ADD 1 TO LI-LINE.

*END OF MAIN LOOP
*****
*****
* CONVERT TO CAPITALS
CHECKCAP.
	MOVE LIIX (I) TO HOLDX.
	IF HOLDX > 96 AND < 123 THEN
		SUBTRACT BACKTOCAP FROM HOLDX
		MOVE HOLDX TO LIIX (I).
*END CONVERT TO CAPITALS
*****

*****
*DELETE A BLOCK
DELETE-A-BLOCK.
      IF DBSET THEN
*I'VE GOT A BLOCK DEFINED
             MOVE ' ' TO DBSET-SW
             IF DBFIRST > J THEN
              MOVE J TO STRTPOS
	      MOVE CURR-TOS TO DELSAVTOS
              MOVE LI-LINE TO DELSAVLIN
              MOVE DBFIRST TO ENDPOS
            ELSE MOVE J TO ENDPOS
              MOVE DBFIRST TO STRTPOS
            END-IF
            MOVE ' ' TO YESORNO-SW
            MOVE STRTPOS TO STRTPOSX
            MOVE ENDPOS TO ENDPOSX
            MOVE 'Delete' TO CACTION
            PERFORM CONFIRMTHIS UNTIL YESORNO-SW = 'Y' OR 'N' OR 'y' OR
		'n'
            MOVE LI-LINE TO LINEVAR
            PERFORM LINE-AT-A-TIME
            IF YESORNO-SW = 'Y' OR 'y'
                PERFORM DELETEBLOCK
            ELSE NEXT SENTENCE
      ELSE MOVE J TO DBFIRST
           CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
	   MOVE CURR-TOS TO DELSAVTOS
           MOVE LI-LINE TO DELSAVLIN
           COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH - 1
           CALL 'CWR?D' USING LI-LINE LI-COL BMARK
           MOVE '1' TO DBSET-SW.
*END DELETE A BLOCK
*****
*****
*COPY A BLOCK
COPY-A-BLOCK.
      IF CBSET THEN
*I'VE GOT A BLOCK DEFINED
             MOVE ' ' TO CBSET-SW
             IF CBFIRST > J THEN
              MOVE J TO STRTPOS
              MOVE LI-LINE TO DELSAVLIN
              MOVE CBFIRST TO ENDPOS
            ELSE MOVE J TO ENDPOS
              MOVE CBFIRST TO STRTPOS
            END-IF
            MOVE ' ' TO YESORNO-SW
            MOVE STRTPOS TO STRTPOSX
            MOVE ENDPOS TO ENDPOSX
            MOVE 'Copy' TO CACTION
            PERFORM CONFIRMTHIS UNTIL YESORNO-SW = 'Y' OR 'N'
		OR 'y' OR 'n'
            MOVE LI-LINE TO LINEVAR
            PERFORM LINE-AT-A-TIME
            MOVE SPACE TO INFILE1
            STRING '?.' DELIMITED BY SIZE
                 WHO-PID DELIMITED BY SIZE
                 '.000.TMP' DELIMITED BY SIZE INTO INFILE1
            IF YESORNO-SW = 'Y' OR 'y'
                PERFORM COPYBLOCK
            ELSE NEXT SENTENCE
      ELSE MOVE J TO CBFIRST
           CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
           MOVE LI-LINE TO DELSAVLIN
           COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH - 1
           CALL 'CWR?D' USING LI-LINE LI-COL BMARK
           MOVE '1' TO CBSET-SW.
*END MOVE A BLOCK
*****

*****
*COPY TO A FILE 
COPY-TO-FILE.
      IF CFSET THEN
*I'VE GOT A BLOCK DEFINED
             MOVE ' ' TO CFSET-SW
             IF CFFIRST > J THEN
              MOVE J TO STRTPOS
              MOVE LI-LINE TO DELSAVLIN
              MOVE CFFIRST TO ENDPOS
            ELSE MOVE J TO ENDPOS
              MOVE CFFIRST TO STRTPOS
            END-IF
            MOVE ' ' TO YESORNO-SW
            MOVE STRTPOS TO STRTPOSX
            MOVE ENDPOS TO ENDPOSX
            MOVE SPACE TO INFILE1
            PERFORM SET-A-FILENAME
            MOVE FILEBUFF TO INFILE1
            IF FNKEY = EXCAPE THEN
                NEXT SENTENCE
            ELSE PERFORM COPYBLOCK
      ELSE MOVE J TO CFFIRST
           CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
           MOVE LI-LINE TO DELSAVLIN
           COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH - 1
           CALL 'CWR?D' USING li-line li-col bmar
           MOVE '1' TO CFSET-SW.
*END COPY TO FILE
*****

*****
*COPYBLOCK
COPYBLOCK.
           IF ENDPOS > INUSE THEN
                 MOVE INUSE TO ENDPOS.
           MOVE INUSE TO SAVEINUSE.
           MOVE INFILE1 TO OUTPRINTFILE.
           CALL 'CDEL' USING OUTPRINTFILE ERRWRD.
	   CALL 'C149' USING OUTPRINTFILE ERRWRD.
           OPEN EXTEND OUTPRINT.
           PERFORM COPY-LINE VARYING STRTWRK FROM STRTPOS BY 1 UNTIL
                 STRTWRK > ENDPOS.
           CLOSE OUTPRINT.
*END COPY BLOCK
*****

COPY-LINE.
           MOVE ALINEPOINT (STRTWRK) TO L TEMP.
           MOVE ALINE(L) TO WORKBUFF1.
           MOVE ALINELEN (STRTWRK) TO L.
           MOVE CR TO WBYTE (L - 1).
           WRITE PLINE FROM WORKBUFF1.

*****
* ASK OK TO DELETE?
* GET Y OR N
CONFIRMTHIS.
      COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH.
      MOVE ZERO TO RELCUR.
      CALL 'CWR?D' USING LI-LINE LI-COL CONFIRMBUFF.
      COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH + 27.
      MOVE 1 TO YESORNO-LEN.
      CALL 'CRE?D' USING LI-LINE LI-COL QUESTIONSCR FNKEY RELCUR
       CDIST-OPT.

* END ASK OK TO DELETE?
*****

*****
* LOOPER2 IS THE MODIFY FUNCTION
LOOPER2.
      IF LASTLINE THEN
        MOVE ' ' TO LASTLINE-SW
        IF LI-LINE > LASTLINEPOS
         MOVE LASTLINEPOS TO LI-LINE.
      COMPUTE J = (LI-LINE + CURR-TOS - LOWLINE).
      COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH.
      MOVE MAXLINELEN TO TX-LEN.
      MOVE ALINEPOINT (J) TO TEMP.
      MOVE ALINE (TEMP) TO TX-BUFF.
      MOVE TABBER TO FNKEY.
      PERFORM CREADER UNTIL FNKEY NOT = TABBER.
      IF FNKEY = ENTERED OR CARR OR DOWNARROW OR UPARROW
       MOVE TX-LEN TO ALINELEN (J)
       ADD 1 TO ALINELEN (J)
       MOVE TX-BUFF TO ALINE (TEMP)
       IF FNKEY = DOWNARROW OR UPARROW THEN
           COMPUTE RELCUR = LI-COL - (ANCHORCOL + NUMBERWIDTH)
       ELSE MOVE ZERO TO RELCUR
       END-IF
       IF FNKEY NOT = UPARROW THEN
            MOVE DOWNARROW TO FNKEY.
*****
*SPLIT
*****
      IF FNKEY = F5 THEN 
       COMPUTE TABNDX = LI-COL - (ANCHORCOL + NUMBERWIDTH + 1
       COMPUTE STRNDX = TABNDX
       UNSTRING TX-BUFF INTO WSTR1 WITH POINTER STRNDX
       PERFORM UNPAD VARYING I FROM 80 BY -1 UNTIL I < 2 OR
        WSTR1-BYTE (I)  NOT = ' '
       COMPUTE M = J + 1
       MOVE TABNDX TO ALINELEN (J)
       MOVE LOW-VALUE TO TX-BYTE (TABNDX)
       ADD 1 TO ALINELEN (J)
       MOVE TX-BUFF TO ALINE (TEMP)
       MOVE ZERO TO RELCUR
       COMPUTE TX-LEN = I + 1
       MOVE WSTR1 TO TX-BUFF
       PERFORM ALLOCATESPACE
       IF FNKEY = EXCAPE THEN
           NEXT SENTENCE
       ELSE PERFORM INSERTINTOTABLE
            PERFORM PAINT-SCREEN
            MOVE EXCAPE TO FNKEY.
      IF FNKEY = UPARROW THEN
         IF LI-LINE = LOWLINE THEN
            IF CURR-TOS = 1 THEN
                  CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
            ELSE
            IF CURR-TOS > KEEPONSCREEN THEN
             SUBTRACT KEEPONSCREEN FROM CURR-TOS
             PERFORM PAINT-SCREEN
             ADD KEEPONSCREEN    TO LI-LINE
             SUBTRACT 1 FROM LI-LINE
            ELSE
             MOVE 1 TO CURR-TOS
             PERFORM PAINT-SCREEN
            ELSE SUBTRACT 1 FROM LI-LINE
      ELSE
      IF FNKEY = DOWNARROW THEN
         IF LI-LINE = HIGHLINE THEN
            IF (CURR-TOS =  INUSE)
              CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
            ELSE
            IF CURR-TOS < (INUSE - KEEPONSCREEN) THEN
             ADD KEEPONSCREEN TO CURR-TOS
             PERFORM PAINT-SCREEN
             SUBTRACT KEEPONSCREEN FROM LI-LINE
             ADD 1 TO LI-LINE
            ELSE
             MOVE INUSE TO CURR-TOS
             PERFORM PAINT-SCREEN
         ELSE
         IF (J = INUSE) THEN
             CALL 'CWR?D' USING LI-LINE LI-COL BEEPER
         ELSE
             ADD 1 TO LI-LINE.
* END OF LOOPER2 ...THE MODIFY FUNCTION
*****

*****
* REMOVE LINES FROM THE FILE
DO-DELETE.
      MOVE LII-BUFF TO TOKEN.
      PERFORM 1040-NUMBER.
      IF NUM = ZERO THEN MOVE 1 TO NUM.
      COMPUTE ENDPOS = J + NUM - 1.
      MOVE CURR-TOS TO DELSAVTOS.
      MOVE LI-LINE TO DELSAVLIN.
      MOVE J TO STRTPOS.
      PERFORM DELETEBLOCK.
     
DELETEBLOCK.
      IF ENDPOS > INUSE THEN
           MOVE INUSE TO ENDPOS.
      MOVE INUSE TO SAVEINUSE.
      MOVE SPACE TO OUTPRINTFILE.
      STRING '?.'    DELIMITED BY SIZE
       WHO-PID DELIMITED BY SIZE
       '.000.TMP' DELIMITED BY SIZE INTO OUTPRINTFILE.
       CALL 'CDEL' USING OUTPRINTFILE ERRWRD.
       CALL 'C149' USING OUTPRINTFILE ERRWRD.
        OPEN EXTEND OUTPRINT.
       PERFORM DELETE-LINE VARYING STRTWRK FROM STRTPOS BY 1 UNTIL
             STRTWRK > ENDPOS.
       CLOSE OUTPRINT.
      MOVE STRTPOS  TO N.
      IF STRTPOS > 1
	 IF STRTPOS = DELSAVTOS
		SUBTRACT 1 FROM DELSAVTOS.
      IF NUM > 1
      	SUBTRACT 1 FROM NUM
      ELSE MOVE 9999 TO NUM.
      COMPUTE TEMP = ENDPOS + 1.
      PERFORM SHOREUP VARYING STRTWRK FROM TEMP  BY 1
       UNTIL STRTWRK > SAVEINUSE.
      MOVE DELSAVTOS TO CURR-TOS.
      MOVE DELSAVLIN TO LI-LINE.
      PERFORM PAINT-SCREEN.
* END REMOVE LINES FROM THE FILE
*****

*****
* CLOSE THE GAP CAUSED BY A DELETE
SHOREUP.
      MOVE FREELINEOVERHEAD (STRTWRK) TO
        FREELINEOVERHEAD (N).
      ADD 1 TO N.

*****
* FIX POINTERS FOR A DELETED RECORD
DELETE-LINE.
      MOVE ALINEPOINT (STRTWRK) TO L TEMP.
      MOVE ALINE(L) TO WORKBUFF1.
      MOVE ALINELEN (STRTWRK)  TO L.
      MOVE CR TO WBYTE (L - 1).
      WRITE PLINE FROM WORKBUFF1.
      MOVE DELRECCHAIN TO ALINEDELPOINT (TEMP).
      MOVE TEMP  TO DELRECCHAIN.
      MOVE ZERO TO ALINELEN (STRTWRK).
      SUBTRACT 1 FROM INUSE.
 
*****
* GO TO A LINE IN THE FILE
GOTOLINE.
      IF J = NUM OR NUM = ZERO OR INUSE = 1
       NEXT SENTENCE
      ELSE
        IF NUM < INUSE
           MOVE NUM TO CURR-TOS
        ELSE COMPUTE TEMP = INUSE - 1
             MOVE TEMP  TO CURR-TOS.
      IF J = NUM OR NUM = ZERO OR INUSE = 1
       NEXT SENTENCE
      ELSE PERFORM PAINT-SCREEN.
* END GO TO A LINE IN THE FILE
*****

*****
* READ TEXT IN FROM A FILE
INSERT-FROM-FILE.
      MOVE ' ' TO EOF1-SW SECOND-EOF1-SW.
      CALL 'OPN1' USING INFILE1 ERRMSG.
      IF NO-ERROR THEN
       PERFORM REALREAD1
       IF NOT EOF1 THEN
        PERFORM INSERTFILELINES UNTIL EOF1
        CALL 'CLS1' USING INFILE1 ERRMSG
        PERFORM PAINT-SCREEN.

INSERTFILELINES.
      MOVE LOW-VALUE TO WBYTE (RECLN1).
      MOVE RECLN1 TO TX-LEN.
      MOVE WORKBUFF1 TO TX-BUFF.
      PERFORM ALLOCATESPACE.
      IF FNKEY = EXCAPE THEN
       MOVE '1' TO EOF1-SW
      ELSE PERFORM INSERTINTOTABLE
           ADD 1 TO M
           PERFORM REALREAD1.
* END READ TEXT IN FROM A FILE
*****

*****
* FIX THE INSERT WINDOW AND GET TEXT TO BE INSERTED
DO-INSERT.
      MOVE '1' TO READJUSTWINDOW-SW.
      PERFORM STRAIGHTEN-SCREEN UNTIL NOT READJUSTWINDOW.
      COMPUTE LINEVAR = LI-LINE.
      MOVE ZERO TO BLANKLINECNT.
      MOVE HOLDABUFF TO TX-BUFF.
      PERFORM INSERTDATAINSERT UNTIL
             FNKEY = EXCAPE OR
         (BLANKLINECNT > (BLANKLINEWINDOW - 1)).
      MOVE TX-BUFF TO HOLDABUFF.
      MOVE LINEVAR TO LI-LINE.
      PERFORM PAINT-SCREEN.

STRAIGHTEN-SCREEN.
      MOVE ZERO TO BLANKLINECNT.
      COMPUTE LINEVAR = LI-LINE.
      PERFORM FIXSCREENFORINSERT VARYING I FROM LINEVAR BY
       1 UNTIL I > HIGHLINE.
      IF READJUSTWINDOW THEN
       PERFORM CHECKSCREENOVERFLOW
       SUBTRACT KEEPONSCREEN FROM LI-LINE.
CHECKSCREENOVERFLOW.
      IF CURR-TOS < (INUSE - KEEPONSCREEN) THEN
       ADD KEEPONSCREEN TO CURR-TOS
       PERFORM PAINT-SCREEN.
INSERTDATAINSERT.
      COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH.
      COMPUTE M = (LINEVAR + CURR-TOS - LOWLINE)
      MOVE MAXLINELEN TO TX-LEN.
      ADD 1 TO BLANKLINECNT.
******99 TO FNKEY CUTS OFF THE REDISPLAY OPTION
      IF DELIM = 'IN'
       MOVE 99 TO CDIST-OPT.
      IF WRAPON THEN
	 MOVE ZERO TO CDIST-OPT
	 MOVE ' ' TO WRAPON-SW
	 MOVE WRAPBUFF TO TX-BUFF.
      MOVE TABBER TO FNKEY.
      MOVE LINEVAR TO LI-LINE.
      PERFORM CREADER UNTIL FNKEY NOT = TABBER.
      MOVE ZERO TO RELCUR.
      IF FNKEY = ZERO THEN
       PERFORM CHECKWRAP
       PERFORM ALLOCATESPACE
       IF FNKEY = EXCAPE THEN
           NEXT SENTENCE	
       ELSE
           PERFORM INSERTINTOTABLE
           ADD 1 TO LINEVAR.
CHECKWRAP.
	IF TX-LEN > MAXLINELEN
	 IF TX-BYTE (MAXLINELEN) = SPACE
		NEXT SENTENCE
	 ELSE MOVE ' ' TO FOUNDCHAR-SW
	     MOVE ZERO TO SAVEJ
	     PERFORM FINDFIRSTSPACE VARYING J FROM MAXLINELEN  BY
		-1 UNTIL TX-BYTE (J) = ' ' OR FOUNDCHAR
	     IF FOUNDCHAR THEN
		NEXT SENTENCE
	     ELSE MOVE 0 TO RELCUR
		  ADD 1 TO J
		  MOVE LOW-VALUES TO WRAPBUFF
		  PERFORM WRAPMOVE VARYING SAVEJ FROM J
		    BY 1 UNTIL SAVEJ > MAXLINELEN
		  ADD 1 TO RELCUR
		  MOVE '1' TO WRAPON-SW
      		  COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH
		  CALL 'CWR?D' USING LI-LINE LI-COL TXTX
		  COMPUTE TX-LEN = J - 1.

WRAPMOVE.
	ADD 1 TO RELCUR
	MOVE TX-BYTE (SAVEJ) TO WRAPBYTE (RELCUR).
	MOVE SPACE  TO TX-BYTE (SAVEJ).

FINDFIRSTSPACE.
	ADD 1 TO SAVEJ.
	IF J > 2 THEN
	    IF SAVEJ < 16
		  NEXT SENTENCE
	    ELSE MOVE '1' TO FOUNDCHAR-SW
	ELSE MOVE '1' TO FOUNDCHAR-SW.

CREADER.
      MOVE MAXLINELEN TO TX-LEN.
      CALL 'CRE?D' USING LI-LINE LI-COL TXTX  FNKEY RELCUR CDIST-OPT.
      MOVE 0 TO CDIST-OPT.
      IF FNKEY = TABBER
       COMPUTE TABNDX = LI-COL - (ANCHORCOL + NUMBERWIDTH) + 1
       COMPUTE STRNDX = TABNDX
       UNSTRING TX-BUFF INTO WSTR1 WITH POINTER STRNDX
       PERFORM UNPAD VARYING I FROM 80 BY -1 UNTIL I < 2 OR
        WSTR1-BYTE (I)  NOT = ' '
       IF TABSTOP (TABNDX) NOT = ' ' THEN
        MOVE ' ' TO TX-BYTE (TABNDX)
        ADD 1 TO TABNDX
        PERFORM TABBUMPER UNTIL TABSTOP (TABNDX) NOT
         = ' '
       ELSE
        PERFORM TABBUMPER UNTIL TABSTOP (TABNDX) NOT
         = ' '
       END-IF
       COMPUTE RELCUR = TABNDX - 1
       COMPUTE STRNDX = TABNDX
       STRING WSTR1 DELIMITED BY SIZE INTO TX-BUFF
         WITH POINTER
        STRNDX
       COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH.
TABBUMPER.
      MOVE ' ' TO TX-BYTE (TABNDX).
      ADD 1 TO TABNDX.
UNPAD.
      MOVE LOW-VALUE TO WSTR1-BYTE (I).
SETRELCUR.
      MOVE ZERO TO RELCUR J.
      MOVE ' ' TO FOUNDCHAR-SW.
      PERFORM FINDFIRSTNOTSPACE UNTIL J > 75 OR FOUNDCHAR.
      IF J > 75 THEN
       NEXT SENTENCE
      ELSE COMPUTE RELCUR = J - 1.

FINDFIRSTNOTSPACE.
      ADD 1 TO J.
      IF TX-BYTE (J) NOT = SPACE THEN
       MOVE '1' TO FOUNDCHAR-SW
       IF (TX-BYTE (J) = 'I' AND TX-BYTE (J + 1) = 'F' AND
          TX-BYTE (J + 2) = ' ')
        OR
          (TX-BYTE (J) = 'E' AND TX-BYTE (J + 1) = 'L' AND
          TX-BYTE (J + 2) = 'S' AND TX-BYTE (J + 3) = 'E' AND
          TX-BYTE (J + 4) = ' ') THEN
              MOVE ' ' TO TX-BYTE (J)
                    TX-BYTE (J + 1)
                    TX-BYTE (J + 2)
                    TX-BYTE (J + 3)
                    TX-BYTE (J + 4)
              ADD 5 TO J.

ALLOCATESPACE.
      IF INUSE  = TABLELIMIT
       CALL 'CWR?D' USING LINEVAR LI-COL BEEPER
       MOVE 1 TO FNKEY
      ELSE
*****USE DELETED RECORD CHAIN FIRST
         IF DELRECCHAIN = -1 THEN
            ADD 1 TO LASTUSED
             MOVE LASTUSED TO ACTIVEREC
             MOVE TX-BUFF TO ALINE (ACTIVEREC)
         ELSE MOVE DELRECCHAIN TO ACTIVEREC
             MOVE ALINEDELPOINT (ACTIVEREC) TO DELRECCHAIN
       MOVE TX-BUFF TO ALINE (ACTIVEREC).
 
INSERTINTOTABLE.
      PERFORM MOVEDOWN VARYING J FROM INUSE BY -1 UNTIL J < M.
      ADD 1 TO INUSE.
      MOVE TX-LEN TO ALINELEN (M).
      ADD 1 TO ALINELEN (M).
      MOVE ACTIVEREC TO ALINEPOINT (M).
MOVEDOWN.
      MOVE FREELINEOVERHEAD (J) TO FREELINEOVERHEAD (J + 1).
FIXSCREENFORINSERT.
      ADD 1 TO BLANKLINECNT.
      MOVE ALL '*' TO LI-BUFF.
      MOVE NUMBERWIDTH TO LI-LEN.
      MOVE ANCHORCOL TO LI-COL.
      CALL 'CWR?D' USING LINEVAR LI-COL LILI.
      IF (BLANKLINECNT < (BLANKLINEWINDOW  + 1))
       ADD 1 TO LINEVAR
      ELSE
       MOVE ' ' TO READJUSTWINDOW-SW
       COMPUTE M = (LINEVAR + CURR-TOS - BLANKLINEWINDOW
          - LOWLINE)
       IF M > INUSE OR ALINELEN (M) < 2  THEN
        ADD 1 TO LINEVAR
  ELSE MOVE ALINEPOINT (M)  TO L
            MOVE ALINELEN (M) TO TX-LEN
            SUBTRACT 1 FROM TX-LEN
            MOVE ALINE (L) TO TX-BUFF
            COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH.
            CALL 'CWR?D' USING LINEVAR LI-COL TXTX
            ADD 1 TO LINEVAR.

*****
* PAINT A SCREEN FULL OF LINES ONE LINE AT A TIME
PAINT-SCREEN.
      MOVE ' ' TO LASTLINE-SW.
      PERFORM LINE-AT-A-TIME VARYING LINEVAR FROM LOWLINE
              BY 1 UNTIL
                 LINEVAR  > HIGHLINE.

LINE-AT-A-TIME.
      COMPUTE J = (LINEVAR + CURR-TOS - LOWLINE).
      IF J = INUSE THEN
            MOVE LINEVAR TO LASTLINEPOS
            MOVE '1' TO LASTLINE-SW.
            MOVE J TO LI-BUFF.
            MOVE NUMBERWIDTH TO LI-LEN.
            MOVE ANCHORCOL TO LI-COL.
      CALL 'CWR?D' USING LINEVAR LI-COL LILI.
      IF J > INUSE OR ALINELEN (J) < 2  THEN

           NEXT SENTENCE
      ELSE MOVE ALINEPOINT (J)  TO L
           MOVE ALINELEN (J) TO TX-LEN
           SUBTRACT 1 FROM TX-LEN
           MOVE ALINE (L) TO TX-BUFF
           COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH
           CALL 'CWR?D' USING LINEVAR LI-COL TXTX.
* PAINT A SCREEN FULL OF LINES ONE LINE AT A TIME
*****

*****
* CONVERT ASCII TO A NUMBER
1040-NUMBER.
      MOVE 1 TO A.
      MOVE 0 TO N.
      MOVE 0 TO NUM.
      MOVE TOKENY(A) TO ADIGITX.
      PERFORM 1050-DIGIT THRU 1050-EXIT UNTIL NOT ADIGIT.
1040-EXIT. EXIT.

1050-DIGIT.
      COMPUTE NUM = (10 * NUM) + (ADIGIT9 - ASCIIZERO).
      COMPUTE N = N + 1.
      COMPUTE A = A + 1.
      MOVE TOKENY(A) TO ADIGITX.
1050-EXIT. EXIT.
* END  CONVERT ASCII TO A NUMBER
*****

SET-A-SEARCH.
*********************************************************************
****
* GET SEARCHSTRING..... SET SRCHLEN TO LENGTH OF SEARCHSTRING
*
      MOVE 60 TO SRCHLEN.
      COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH.
      MOVE ZERO TO RELCUR.
      CALL 'CWR?D' USING LI-LINE LI-COL ENTERSEARCH.
      ADD 15 TO LI-COL.
      CALL 'CRE?D' USING LI-LINE LI-COL SEARCH-BUFF FNKEY RELCUR
       CDIST-OPT.
      SUBTRACT 1 FROM SRCHLEN.
      COMPUTE   LI-COL = ANCHORCOL.
      CALL 'CWR?D' USING LI-LINE LI-COL BLINK-BUFF.
****
* FORM HASH OF SEARCH STRING.
*
      MOVE LI-LINE TO LINEVAR HOLDVAR.
      IF FNKEY = ZERO OR FNKEY = CARR
       MOVE ZERO TO PATHASH
       PERFORM FORM-PAT-HASH VARYING I FROM 1 BY 1 UNTIL I
        > SRCHLEN
       MOVE J TO CURPOS
       MOVE ' ' TO EOF-SW
       MOVE ' ' TO BIGFOUND-SW
       PERFORM 1120-SEARCH UNTIL BIGFOUND OR EOF.
      MOVE HOLDVAR TO LINEVAR.
      PERFORM LINE-AT-A-TIME.
SET-A-TABTAB.
*********************************************************************
****
* GET TAB STRING
*
      COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH.
      MOVE MAXLINELEN TO TABLEN.
      MOVE ZERO TO RELCUR.
      CALL 'CRE?D' USING LI-LINE LI-COL TABSTOPS  FNKEY RELCUR
       CDIST-OPT.
      MOVE LI-LINE TO LINEVAR.
      PERFORM LINE-AT-A-TIME.

SET-A-FILENAME.
*********************************************************************
****
* GET A FILENAME FROM USER
*
      COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH.
      MOVE MAXLINELEN TO ENTRYLEN.
      MOVE ZERO TO RELCUR.
      CALL 'CWR?D' USING LI-LINE LI-COL ENTERFILE.
      COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH + 16.
      CALL 'CRE?D' USING LI-LINE LI-COL FILEENTRY  FNKEY RELCUR
       CDIST-OPT.
      MOVE LI-LINE TO LINEVAR.
      PERFORM LINE-AT-A-TIME.
      IF FILEBUFF = SPACES OR LOW-VALUES
		THEN MOVE '@NULL' TO FILEBUFF.

1120-SEARCH.
      MOVE ALINEPOINT (CURPOS) TO L.
      MOVE ALINELEN (CURPOS) TO LINELN.
      SUBTRACT 1 FROM LINELN.
      MOVE ALINE (L) TO WORK-BUFF.
      MOVE ZERO TO SRCHASH.
      PERFORM FORM-SRC-HASH VARYING I FROM 1 BY 1 UNTIL I
       > SRCHLEN.
      MOVE SRCHLEN TO CHAR-POINTER.
      PERFORM DO-SEARCH
            UNTIL CHAR-POINTER > LINELN.
      IF DI-RECT = 'SF' THEN
       ADD 1 TO CURPOS
       IF CURPOS > INUSE THEN
        MOVE '1' TO EOF-SW
       ELSE NEXT SENTENCE
      ELSE SUBTRACT 1 FROM CURPOS
           IF CURPOS < 1  THEN
            MOVE 1 TO CURPOS
            MOVE '1' TO EOF-SW.
      IF EOF THEN
       CALL 'CWR?D' USING LI-LINE LI-COL BEEPER.
1120-EXIT. EXIT.

DO-SEARCH.
      IF SRCHASH = PATHASH THEN
       MOVE ' ' TO NOT-A-MATCH-SW.
       PERFORM READ-COMPARE VARYING I FROM 1 BY 1 UNTIL
        I > SRCHLEN OR NOT-A-MATCH
         IF NOT-A-MATCH THEN
           NEXT SENTENCE
         ELSE
           MOVE LINELN TO CHAR-POINTER
           MOVE '1' TO BIGFOUND-SW
           IF (CURPOS > CURR-TOS OR CURPOS = CURR-TOS)
              AND
             (CURPOS < (CURR-TOS + ((HIGHLINE - LOWLINE) + 1)))
              COMPUTE LINEVAR = CURPOS  - CURR-TOS + LOWLINE
             MOVE LINEVAR TO LI-LINE
             PERFORM LINE-AT-A-TIME
           ELSE
            MOVE CURPOS TO NUM
            PERFORM GOTOLINE
            COMPUTE LINEVAR = CURPOS  - CURR-TOS + LOWLINE
            MOVE LINEVAR TO LI-LINE.
****
*                   WE HAVE A MATCH.....PUT THIS ON THE SCREEN
*
      ADD 1 TO CHAR-POINTER.
      ADD SCRCHAR (CHAR-POINTER) TO SRCHASH.
      SUBTRACT SCRCHAR (CHAR-POINTER - SRCHLEN) FROM SRCHASH.

READ-COMPARE.
      IF SCRCHAR (CHAR-POINTER - SRCHLEN + I) NOT = PATCHAR (I)
       THEN MOVE '1' TO NOT-A-MATCH-SW.

FORM-PAT-HASH.
      ADD PATCHAR (I) TO PATHASH.

FORM-SRC-HASH.
      ADD SCRCHAR (I) TO SRCHASH.

LOAD-FROM-FILE.
      MOVE INFILE1 TO EDITFILE.
      CALL 'OPN1' USING INFILE1 ERRMSG.
      IF NO-ERROR THEN
       NEXT SENTENCE
      ELSE
	   COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH
	   MOVE ZERO TO RELCUR
	   CALL 'CWR?D'  USING LI-LINE LI-COL FILENOTFOUND
           GO TO LOAD-FROM-FILE-EXIT.
      MOVE ZERO TO RELCUR.
      MOVE -1 TO DELRECCHAIN.
      PERFORM MOVEZS VARYING I FROM 1 BY 1 UNTIL I > TABLELIMIT.
      MOVE ZERO TO READFLAG1 READOFFSET1.
      MOVE ZERO TO CLINEFEEDS1 CLINEFEEDS.
      MOVE ZERO TO SAVEBYTES1.
      MOVE ' ' TO EOF1-SW  SECOND-EOF1-SW.
      PERFORM REALREAD1.
      MOVE ZERO TO I.
      PERFORM DO-LOAD UNTIL EOF1.
      CALL 'CLS1' USING INFILE1 ERRMSG.
      MOVE I TO LASTUSED  INUSE.
      MOVE ZERO TO CDIST-OPT.
      MOVE 1 TO CURR-TOS.
      MOVE LOWLINE TO LI-LINE
      MOVE ANCHORCOL  TO LI-COL.
      MOVE 1 TO I.
      MOVE LOW-VALUES TO HOLDABUFF.
      PERFORM PAINT-SCREEN.
LOAD-FROM-FILE-EXIT. EXIT.


DO-LOAD.
      IF I > TABLELIMIT THEN
       MOVE '1' TO EOF1-SW
      ELSE
	   ADD 1 TO I
           IF (RECLN1 > MAXLINELEN + 1) THEN
             COMPUTE RECLN1 = MAXLINELEN
           END-IF
           MOVE LOW-VALUE TO WBYTE (RECLN1)
           ADD 1 TO RECLN1
           MOVE RECLN1 TO ALINELEN (I)
           MOVE I TO ALINEPOINT (I)
           MOVE WORKBUFF1 TO ALINE (I).
      PERFORM REALREAD1.

LOAD-FROM-MEM.
      MOVE INFILE1 TO EDITFILE.
      MOVE ZERO TO RELCUR.
      MOVE -1 TO DELRECCHAIN.
      PERFORM MOVEZS VARYING I FROM 1 BY 1 UNTIL I > TABLELIMIT.
      MOVE ZERO TO READFLAG1 READOFFSET1.
      MOVE ZERO TO CLINEFEEDS1 CLINEFEEDS.
      MOVE ZERO TO SAVEBYTES1.
      MOVE ZERO TO I.
      PERFORM DO-LOAD-MEM VARYING LOADI FROM 1 BY 1
 		UNTIL LOADI > NUMOFLINES.
      MOVE I TO LASTUSED  INUSE.
      MOVE ZERO TO CDIST-OPT.
      MOVE 1 TO CURR-TOS.
      MOVE LOWLINE TO LI-LINE
      MOVE ANCHORCOL  TO LI-COL.
      MOVE 1 TO I.
      MOVE LOW-VALUES TO HOLDABUFF.
      PERFORM PAINT-SCREEN.
LOAD-FROM-MEM-EXIT. EXIT.

DO-LOAD-MEM.
      IF I > TABLELIMIT THEN
       MOVE NUMOFLINES TO LOADI
      ELSE
	   ADD 1 TO I
	   MOVE INLINES (LOADI) TO WORKBUFF1
	   CALL 'GTLEN' USING INLINES (LOADI) GTLENMAX
			RECLN1
	   ADD 1 TO RECLN1
           IF (RECLN1 > MAXLINELEN + 1) THEN
             COMPUTE RECLN1 = MAXLINELEN
           END-IF
           MOVE LOW-VALUE TO WBYTE (RECLN1)
           ADD 1 TO RECLN1
           MOVE RECLN1 TO ALINELEN (I)
           MOVE I TO ALINEPOINT (I)
           MOVE WORKBUFF1 TO ALINE (I).

REALREAD1.
      MOVE ' ' TO GOT-ONE-SW.
      PERFORM READ1 UNTIL GOT-ONE OR EOF1.
      IF NOT EOF1 THEN
           CALL 'TRTAB' USING WORKBUFF1 WORKBUFF1 RECLN1.

READ1.
*******
* IT IS POSSIBLE TO HAVE EOF AND DATA RETURNED; THEREFORE, IF IT'S
* A REAL EOF THEN IT'S TIME TO STOP, ELSE DELAY SETTING EOF BY 1
* BECAUSE I HAVE A BUFFER TO PROCESS.
*******
        IF NOT SECOND-EOF1 THEN
             MOVE 255 TO RECLN1
             CALL 'REA1' USING WORKBUF

               READOFFSET1 ERRWRD
             IF END-OF-FILE
              THEN MOVE '1' TO SECOND-EOF1-SW
             END-IF
             IF RECLN1 = 0  THEN
              MOVE '1' TO EOF1-SW
             ELSE ADD RECLN1 TO BYTESREAD1
                  ADD 1 TO CLINEFEEDS1
                  IF WORKBUFF11 = FORMFEEDER THEN
                    ADD 1 TO CFORMFEEDS1
                  ELSE NEXT SENTENCE
                  END-IF
            MOVE '1' TO GOT-ONE-SW
      ELSE MOVE '1' TO EOF1-SW.

MOVEZS.
      MOVE ZERO TO ALINEPOINT (I).
      MOVE ZERO TO ALINELEN (I).

SAVE-THIS-FILE.
*****
*ONE CHANCE TO SAVE THIS FILE
     IF NOSAVE THEN
 	NEXT SENTENCE
      ELSE
         PERFORM CHECKATNULL
 	 IF FNKEY NOT = EXCAPE THEN
         INSPECT EDITFILE REPLACING ALL LOW-VALUE BY SPACE
      	MOVE SPACE TO OUTPRINTFILE
      	STRING EDITFILE DELIMITED BY SPACE
       	'.NEW' DELIMITED BY SIZE INTO OUTPRINTFILE
       	CALL 'CDEL' USING OUTPRINTFILE ERRWRD
	CALL 'C149' USING OUTPRINTFILE ERRWRD
        OPEN EXTEND OUTPRINT
      	IF FILE-STATUS NOT = I-O-OK
      		COMPUTE LI-COL = ANCHORCOL + NUMBERWIDTH
      		MOVE ZERO TO RELCUR
		MOVE LOW-VALUE TO FILEP
		STRING '**** File Problem ****' DELIMITED BY SIZE INTO
			FILEP
      		CALL 'CWR?D' USING LI-LINE LI-COL FILEPROBLEM
      	ELSE
      	PERFORM DELOADER VARYING I FROM 1 BY 1 UNTIL I > INUSE
      	CLOSE OUTPRINT
	END-IF
   	IF FILE-STATUS = I-O-OK THEN
*****
* RENAME OLD FILE TO FILE.BAC
*****
           MOVE SPACES TO EDITFILEBAC
           STRING EDITFILE DELIMITED BY SPACE
                 '.BAC' DELIMITED BY SPACE INTO EDITFILEBAC
           CALL 'CDEL' USING EDITFILEBAC ERRWRD
           CALL 'RENAME' USING EDITFILE EDITFILEBAC ERRWRD
*****
* RENAME FILE.NEW TO FILE
*****
           MOVE SPACE TO EDITFILEBAC
           STRING EDITFILE DELIMITED BY SPACE
                 '.NEW' DELIMITED BY SPACE INTO EDITFILEBAC
           CALL 'RENAME' USING EDITFILEBAC  EDITFILE ERRWRD.
*END  ONE CHANCE TO SAVE THIS FILE
*****

DELOADER.
      MOVE ALINEPOINT (I) TO L.
      MOVE ALINE(L) TO WORKBUFF1.
      MOVE ALINELEN (I) TO L.
      MOVE CR TO WBYTE (L - 1).
      WRITE PLINE FROM WORKBUFF1.
DELOADMEM.
      MOVE ALINEPOINT (I) TO L.
      MOVE SPACE TO INLINES (I).
      STRING ALINE (L) DELIMITED BY LOW-VALUE INTO INLINES (I).


9999-ERROR.
      CALL 'IRTN' USING ERRWRD.
9999-EXIT. EXIT.

****************
*****END OF PROGRAM
